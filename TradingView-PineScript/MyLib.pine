




//////////////////////////////////////////////////
//@version=6
//////////////////////////////////////////////////
library("MyLib")





//////////////////////////////////////////////////
// 變數
//////////////////////////////////////////////////
float C = close  // 收
float O = open   // 開
float H = high   // 高
float L = low    // 低
float V = volume // 量





// @enum           交叉
// @field _None_   無
// @field _Golden_ 黃金交叉
// @field _Death_  死亡交叉
export enum _Cross_
    _None_   = "None"
    _Golden_ = "Golden"
    _Death_  = "Death"





// @enum             有號數
// @field _Positive_ 正數
// @field _Negative_ 負數
export enum _Signed_
    _Positive_ = "+"
    _Negative_ = "-"





// @function 絕對值
export _Math_Absolute_(float _value_) =>
    float retValue = _value_
    ////////////////////////////////////////////////////////////
    if (retValue < 00.00)
        retValue := retValue * -1
    ////////////////////////////////////////////////////////////
    retValue





// @function 平均值
export _Math_Average_(float _value_, int _length_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    retValue := retValue + nz( (1 - (1 / _length_)) * retValue[1] * 1       )
    retValue := retValue + nz(      (1 / _length_)  * 1           * _value_ )
    ////////////////////////////////////////////////////////////
    retValue





export _Math_Highest(float _value_, int _length_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    for offset = 0 to _length_ - 1
        if (nz(_value_[offset]) > retValue)
            retValue := nz(_value_[offset])
    ////////////////////////////////////////////////////////////
    retValue





export _Math_Lowest(float _value_, int _length_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    for offset = 0 to _length_ - 1
        if (nz(_value_[offset]) < retValue)
            retValue := nz(_value_[offset])
    ////////////////////////////////////////////////////////////
    retValue





// @function 最大值
export _Math_Maximum_(float _value1_, float _value2_) =>
    float retValue = _value1_
    ////////////////////////////////////////////////////////////
    if (_value2_ > retValue)
        retValue := _value2_
    ////////////////////////////////////////////////////////////
    retValue





// @function 最小值
export _Math_Minimum_(float _value1_, float _value2_) =>
    float retValue = _value1_
    ////////////////////////////////////////////////////////////
    if (_value2_ < retValue)
        retValue := _value2_
    ////////////////////////////////////////////////////////////
    retValue





export _Calc_DI_(float _adm_, float _atr_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    retValue := retValue + _adm_
    retValue := retValue / _atr_
    retValue := retValue * 100
    ////////////////////////////////////////////////////////////
    retValue





export _Calc_DM_(_Positive_Negative_ _positive_negative_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    float upMove =    H[0]  - nz(H[1])
    float dnMove = nz(L[1]) -    L[0]
    ////////////////////////////////////////////////////////////
    if (_positive_negative_ == _Positive_Negative_._Positive_)
        retValue := ((upMove > dnMove) and (upMove > 00.00)) ? upMove : 00.00
    if (_positive_negative_ == _Positive_Negative_._Negative_)
        retValue := ((dnMove > upMove) and (dnMove > 00.00)) ? dnMove : 00.00
    ////////////////////////////////////////////////////////////
    retValue





// @param _length_ 計算天期
export _Calc_DM_AVG_(float _dm_, int _length_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    retValue := _Math_Average_(_dm_, _length_)
    ////////////////////////////////////////////////////////////
    retValue





////////////////////////////////////////////////////////////
//       | +DI - -DI |       
// DX = (-------------) * 100
//       | +DI + -DI |       
////////////////////////////////////////////////////////////

// @function (Directional Index)
export _Calc_DX_(float _plusDI_, float _minusDI_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    retValue := retValue + _Math_Absolute_(_plusDI_ - _minusDI_)
    retValue := retValue / _Math_Absolute_(_plusDI_ + _minusDI_)
    retValue := retValue * 100
    ////////////////////////////////////////////////////////////
    retValue





// @function          (Average Directional Index)
// @param    _length_ 計算天期
export _Calc_DX_AVG_(float _dx_, int _length_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    retValue := _Math_Average_(_dx_, _length_)
    ////////////////////////////////////////////////////////////
    retValue





////////////////////////////////////////////////////////////
// TR = MAX( [1], [2], [3] )
////////////////////////////////////////////////////////////
// [1] =   Current High - Current Low     
// [2] = | Current High - Previous Close |
// [3] = | Current Low  - Previous Close |
////////////////////////////////////////////////////////////

// @function 波動值(True Range)
export _Calc_TR_() =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    retValue := _Math_Maximum_(retValue,                 H[0] -    L[0]  )
    retValue := _Math_Maximum_(retValue, _Math_Absolute_(H[0] - nz(C[1])))
    retValue := _Math_Maximum_(retValue, _Math_Absolute_(L[0] - nz(C[1])))
    ////////////////////////////////////////////////////////////
    retValue





// @param _length_ 計算天期
export _Calc_TR_AVG_(float _tr_, int _length_) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    retValue := _Math_Average_(_tr_, _length_)
    ////////////////////////////////////////////////////////////
    retValue





// @function          取得慢線(Slow Line)
// @param    _length_ 計算天期
export _Calc_D_(float _k_, int _length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := _Math_Average_(_k_, _length_)
    //////////////////////////////////////////////////
    retValue





// @function 取得訊號線(Signal Line)
export _Calc_J_(float _k_, float _d_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := retValue + (03 * _k_)
    retValue := retValue - (02 * _d_)
    //////////////////////////////////////////////////
    retValue





// @function          取得快線(Fast Line)
// @param    _length_ 計算天期
export _Calc_K_(float _rsv_, int _length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := _Math_Average_(_rsv_, _length_)
    //////////////////////////////////////////////////
    retValue





// @function          未成熟隨機值(Raw Stochastic Value)
// @param    _source_ 系列價格
// @param    _length_ 計算天期
export _Calc_RSV_(float _source_, int _length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := retValue + (_source_                - ta.lowest(L, _length_))
    retValue := retValue / (ta.highest(H, _length_) - ta.lowest(L, _length_))
    retValue := retValue * 100
    //////////////////////////////////////////////////
    retValue





// @function 取得慢線(Slow Line)
export _Calc_DEA_(float _dif_, int _length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := _Calc_EMA_(_dif_, 2, _length_)
    //////////////////////////////////////////////////
    retValue





// @function               取得快線(Fast Line)
// @param    _fast_length_ 快線天期
// @param    _slow_length_ 慢線天期
export _Calc_DIF_(float _source_, int _fast_length_, int _slow_length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := retValue + _Calc_EMA_(_source_, 2, _fast_length_)
    retValue := retValue - _Calc_EMA_(_source_, 2, _slow_length_)
    //////////////////////////////////////////////////
    retValue





// @function 取得訊號柱(Signal Histogram)
export _Calc_OSC_(float _dif_, float _dea_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := retValue + _dif_
    retValue := retValue - _dea_
    //////////////////////////////////////////////////
    retValue





// @function             取得指數移動平均(Exponential Moving Average)
// @param    _source_    系列價格
// @param    _smoothing_ 平滑指數
// @param    _length_    計算天期
export _Calc_EMA_(float _source_, int _smoothing_, int _length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float alpha = _smoothing_ / (_length_ + 1)
    //////////////////////////////////////////////////
    retValue := retValue + ( _source_ * (alpha) )
    //////////////////////////////////////////////////
    retValue := retValue + ( nz(retValue[1]) * (1 - alpha) )
    //////////////////////////////////////////////////
    retValue





// @function          取得簡單移動平均(Simple Moving Average)
// @param    _source_ 系列價格
// @param    _length_ 計算天期
export _Calc_SMA_(float _source_, int _length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float numerator   = 00.00
    float denominator = 00.00
    //////////////////////////////////////////////////
    for offset = 0 to _length_ - 1
        numerator := numerator + ( nz(_source_[offset]) )
    //////////////////////////////////////////////////
    denominator := _length_
    //////////////////////////////////////////////////
    retValue := numerator / denominator
    //////////////////////////////////////////////////
    retValue





// @function          取得加權移動平均(Weighted Moving Average)
// @param    _source_ 系列價格
// @param    _length_ 計算天期
export _Calc_WMA_(float _source_, int _length_) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float numerator   = 00.00
    float denominator = 00.00
    //////////////////////////////////////////////////
    for offset = 0 to _length_ - 1
        numerator   := numerator   + ( nz(_source_[offset]) * (_length_ - offset) )
        denominator := denominator + (                        (_length_ - offset) )
    //////////////////////////////////////////////////
    retValue := numerator / denominator
    //////////////////////////////////////////////////
    retValue





// @function 買量
export BuyVolume() =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    if (H != L)
        retValue := +(V * (C - L) / (H - L))
    ////////////////////////////////////////////////////////////
    retValue





// @function 賣量
export SellVolume() =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    if (H != L)
        retValue := -(V * (H - C) / (H - L))
    ////////////////////////////////////////////////////////////
    retValue





// @type                  XXX(Directional Movement Index)
// @field _adx_smoothing_ XXX
// @field _di_length_     XXX
export type _DMI_
    int _adx_smoothing_ = 14
    int _di_length_     = 14





export method _getPositiveDI_(_DMI_ this) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    float dm = _Calc_DM_(_Positive_Negative_._Positive_)
    float tr = _Calc_TR_(                              )
    ////////////////////////////////////////////////////////////
    float adm = _Calc_DM_AVG_(dm, this._di_length_)
    float atr = _Calc_TR_AVG_(tr, this._di_length_)
    ////////////////////////////////////////////////////////////
    retValue := _Calc_DI_(adm, atr)
    ////////////////////////////////////////////////////////////
    retValue





export method _getNegativeDI_(_DMI_ this) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    float dm = _Calc_DM_(_Positive_Negative_._Negative_)
    float tr = _Calc_TR_(                              )
    ////////////////////////////////////////////////////////////
    float adm = _Calc_DM_AVG_(dm, this._di_length_)
    float atr = _Calc_TR_AVG_(tr, this._di_length_)
    ////////////////////////////////////////////////////////////
    retValue := _Calc_DI_(adm, atr)
    ////////////////////////////////////////////////////////////
    retValue





export method _getADX_(_DMI_ this) =>
    float retValue = 00.00
    ////////////////////////////////////////////////////////////
    float positiveDI = this._getPositiveDI_()
    float negativeDI = this._getNegativeDI_()
    ////////////////////////////////////////////////////////////
    float dx = _Calc_DX_(positiveDI, negativeDI)
    ////////////////////////////////////////////////////////////
    retValue := _Calc_DX_AVG_(dx, this._adx_smoothing_)
    ////////////////////////////////////////////////////////////
    retValue





// @type                  隨機指標(Random Index)
// @field _source_        系列價格
// @field _signal_length_ 訊號天期
// @field _fast_length_   快線天期
// @field _slow_length_   慢線天期
export type _KDJ_
    float _source_ = close
    //////////////////////////////////////////////////
    int _signal_length_ = 09
    int _fast_length_   = 03
    int _slow_length_   = 03





// @function 取得快線(Fast Line)
export method _getK_(_KDJ_ this) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float _rsv_ = _Calc_RSV_(this._source_, this._signal_length_)
    //////////////////////////////////////////////////
    retValue := _Calc_K_(_rsv_, this._fast_length_)
    //////////////////////////////////////////////////
    retValue





// @function 取得慢線(Slow Line)
export method _getD_(_KDJ_ this) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float k = this._getK_()
    //////////////////////////////////////////////////
    retValue := _Calc_D_(k, this._slow_length_)
    //////////////////////////////////////////////////
    retValue





// @function 取得訊號線(Signal Line)
export method _getJ_(_KDJ_ this) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float k = this._getK_()
    float d = this._getD_()
    //////////////////////////////////////////////////
    retValue := _Calc_J_(k, d)
    //////////////////////////////////////////////////
    retValue





// @function 取得交叉(Cross)
export method _getCross_(_KDJ_ this) =>
    _Cross_ retValue = _Cross_._None_
    //////////////////////////////////////////////////
    if ( (this._getK_()[0] > this._getD_()[0]) and (this._getK_()[1] < this._getD_()[1]) )
        retValue := _Cross_._Golden_
    if ( (this._getK_()[0] < this._getD_()[0]) and (this._getK_()[1] > this._getD_()[1]) )
        retValue := _Cross_._Death_
    //////////////////////////////////////////////////
    retValue





// @type                  平滑異同移動平均(Moving Average Convergence / Divergence)
// @field _source_        系列價格
// @field _fast_length_   快線天期
// @field _slow_length_   慢線天期
// @field _signal_length_ 訊號天期
export type _MACD_
    float _source_ = close
    //////////////////////////////////////////////////
    int _fast_length_   = 12
    int _slow_length_   = 26
    int _signal_length_ = 09





// @function 取得快線(Fast Line)
export method _getDIF_(_MACD_ this) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    retValue := _Calc_DIF_(this._source_, this._fast_length_, this._slow_length_)
    //////////////////////////////////////////////////
    retValue





// @function 取得慢線(Slow Line)
export method _getDEA_(_MACD_ this) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float dif = this._getDIF_()
    //////////////////////////////////////////////////
    retValue := _Calc_DEA_(dif, this._signal_length_)
    //////////////////////////////////////////////////
    retValue





// @function 取得訊號柱(Signal Histogram)
export method _getOSC_(_MACD_ this) =>
    float retValue = 00.00
    //////////////////////////////////////////////////
    float dif = this._getDIF_()
    float dea = this._getDEA_()
    //////////////////////////////////////////////////
    retValue := _Calc_OSC_(dif, dea)
    //////////////////////////////////////////////////
    retValue





// @function 取得交叉(Cross)
export method _getCross_(_MACD_ this) =>
    _Cross_ retValue = _Cross_._None_
    //////////////////////////////////////////////////
    if (math.sign(this._getOSC_()[0]) > math.sign(this._getOSC_()[1]))
        retValue := _Cross_._Golden_
    if (math.sign(this._getOSC_()[0]) < math.sign(this._getOSC_()[1]))
        retValue := _Cross_._Death_
    //////////////////////////////////////////////////
    retValue
